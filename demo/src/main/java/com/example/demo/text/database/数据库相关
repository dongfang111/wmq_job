简述：InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，
后者是通过在数据块中对相应数据行加锁来实现的。
InnoDB这种行锁实现特点意味着：
只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！

一、MyISAM和InnoDB引擎：
1.InnoDB支持事务，默认行级锁，支持表级锁-行级锁，
  MyISAM不支持事务，表级锁
  行锁不是锁记录，是锁索引。
  是否支持事务和崩溃后的安全恢复
2.InoB支持外键。MYI不支持外键。对于一个包含外键的InB表转成MYI会失败。
3.
InoB是聚集索引，索引结构使用B+树，数据文件和主键索引绑在一起的。
MyI是非聚集索引，索引结构使用B+树，数据文件和索引文件是分离的，索引文件保存的是数据文件的指针
4.Inob select count(*) from table 需要全表扫描
  MyI有一个变量保存了行数
5.InoB不支持全文索引，MyI支持，mysql5.7以后Inb也支持全文索引了。
6.MYI表格可以被压缩后进行查询操作。
7.InoB必须有主键，如果没有主键，它会自己创建一个主键
  MYI可以没有主键。
8.InoB存储文件有 frm(表定义文件) ibd(数据文件) 
  MYI存储文件有frm(表定义文件) MYD(数据文件) MYI(索引文件)  
9.是否支持MVCC  
  
1.如果不用支持事务，选择MYI
  如果只是读操作，选择MYI
2.MYSQL5.5以后InoB变成默认引擎了

InoB为什么推荐自增ID作为主键？自增ID可以保证每次B+树插入都是向右扩展的，可以避免B+频繁的合并和分裂，

InoB引擎的四大特性
1.插入缓冲-insert buffer 2二次写 double write 3自适应哈希ahi 4预读read ahead


二、B+树
http://www.liuzk.com/410.html
2.1 索引分类：B+索引、Hash索引、全文索引
Hash索引：只能用等值查询，不能进行排序，不能进行范围查询。
2.2 二叉查找树、平衡二叉树、B树。B+树由以上演变而来
二叉查找树特点：任何节点的左节点的键值都小于当前节点的键值，右节点的键值都大于当前节点的键值。
      如果不平衡的二叉查找树就会变成一个链表，有可能会全表扫描。
平衡二叉树又称AVL树，在满足二叉查找树的基础上，要求每个节点的左右字数高度差不能超过1。
       平衡二叉树如果不平衡了，会调整节点保持平衡。
B树(Balance Tree)(B-树)。由于内存的易失性，一般情况下会把数据和索引存储在磁盘里面。
     平衡二叉树每个节点只存储一个键值和数据。这样海量数据访问也很慢。
	 所以引出来B树，每个节点称为页。
B+树：叶子节点数据是单向链表，每个页之前是通过双向链表连接的。
	 
在Mysql数据读取基本单位都是页。INNODB中页的默认大小是16KB。
2.3 B+树和B树区别：https://zq.zhaopin.com/answer/7167991/
①B+树非叶子节点上是不存储数据的，仅存储键值，所以能存储更多的关键字。B树上键值和数据都有。所以B+树IO次数少。
 B树数据分散到各个节点，要实现范围查找是不容易的，不适合范围查找.
 B+树数据都分布在叶子节点，并且是顺序排放的。


2.4 B+树和B树的删除和添加 https://blog.csdn.net/apriaaaa/article/details/102975155

2.5 MyISAM B+树，叶子节点不存储数据，只是存储数据的文件地址。

2.5.1聚集索引：主键索引-如果没有主键，系统会帮忙创建一个隐式的主键。
 InnoDb中，B+树的键值是主键，在叶子节点保存了表中所有的数据。
 这种以主键作为B+树索引的键值而构建的B+树索引，称之为聚集索引。
 
 非聚集索引：以主键以外的列值作为键值构建的B+索引。
 这种需要回表主键索引去查询数据。
 
 数据即索引，索引即数据。
 
三、数据库隔离级别

INNODB怎么解决幻读的

3.1 mysql语句
  3.1.1 limit分页语句
	limit和offset用法。mysql里分页一般用limit来实现
	1.select * from article LIMIT 1,3
	2.select * from article LIMIT 3 OFFSET 1
	上面两种写法都表示取2,3,4三条条数据

	当 limit后面跟两个参数的时候，第一个数表示要跳过的数量，后一位表示要取的数量,例如
	select* from article LIMIT 1,3 就是跳过1条数据,从第2条数据开始取，取3条数据，也就是取2,3,4三条数据

	当 limit后面跟一个参数的时候，该参数表示要取的数据的数量
	例如 select* from article LIMIT 3  表示直接取前三条数据，类似sqlserver里的top语法。

	当 limit和offset组合使用的时候，limit后面只能有一个参数，表示要取的的数量,offset表示要跳过的数量 。
	例如select * from article LIMIT 3 OFFSET 1 表示跳过1条数据,从第2条数据开始取，取3条数据，也就是取2,3,4三条数据
	
3.2 	
https://blog.csdn.net/youzhouliu/article/details/51751860
	
 
 
 

	 





  
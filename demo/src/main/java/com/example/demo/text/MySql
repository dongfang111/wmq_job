Mysql基础架构分析
1.1 概述
连接器：身份认证和权限相关(登录MySql的时候)
  主要负责登录数据库，进行用户身份认证，包括校验账户密码，权限等操作。
   如果账户密码已通过，连接器会到权限表中查询用户的所有权限，之后在这个链接里面的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，只要这个链接不断开，即使管理员修改了用户权限，该用户也不会受影响。
查询缓存：执行查询语句的时候，会先查询缓存，MySQL8.0版本以后移除，功能不太实用。
分析器：没有命中缓存的话，SQL语句就会经过分析器，说白了看SQL语句干啥，再检查SQL语句语法是否正确。
    第一步：词法分析，首先要提取关键字，比如select、提出查询的表，提出字段名，提出查询条件。
    第二步：语法分析，主要是输入的sql是否正确，是否符合MySQL的语法。
优化器：按照MySQL认为最优的方案去执行。有可能也不是最优。
执行器：执行语句，然后从存储引擎返回数据。
   执行之前，会校验该用户有没有权限，如果没有权限返回错误信息。如果有权限去调用引擎的接口。

server:存储过程、触发器、视图、函数，还有一个通用的日志模块binlog日志模块。(binlog所有引擎都可以使用)
客户端-->连接器-->分析器-->优化器-->执行器
          |
          |
         \|/
       查询缓存
存储引擎层：主要负责数据的存储和读取，采用可替换的插件式架构。
支持多个存储引擎，InnoDB、MyISAM、Memory。还有InnoDB自有的日志模块redolog模块。
MySQL5.5.5版本开始被当做默认存储引擎。

1.2 redolog两阶段提交
redolog物理日志-重做日志-循环写
binlog逻辑日志-归档日志--追加写
undo log回滚日志
1.2.1 有了redolog，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为：crash-safe.
1.2.2 MySQL经常说到的WAL技术，Write-Ahead Logging(预写式日志)。关键点：先写日志，再写磁盘。
    WAL是大部分数据库系统实现一致性和持久性的通用设计模式。
1.2.3 更新一条数据过程：redolog两阶段提交
    1.执行器先获取Id=2这一行数据。调用引擎，如果在内存，直接返回。如果不在内存，从磁盘读入内存。
    2.执行器拿到Id=2然后将当前值+1，调用存储引擎，存储引擎更新到内存，并记录到redo log里面，这时候redo log处于prepare状态，然后存储引擎告诉执行器更新完成，提交事务。
    3.执行器将操作记录记录到binlog里面，并且调用存储引擎提交事务接口，然后引擎把刚刚写入的redo log改成提交(commit)状态，更新完成。
1.2.4 redo log影响主库的数据，binlog影响从库的数据
1.2.5 问题：假设事务提交过程中，MySQL进程突然奔溃，重启后是怎么保证数据不丢失的？
     1)检查redo log中是完整并且是prepare状态的事务，然后根据XID-事务ID。
     2)从binlog中找到对应的事务，如果找不到就回滚(根据XID从undo log找到回滚日志)。如果能找到并且事务完整，重新commit redo log，完成事务提交。







